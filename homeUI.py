# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'home_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from scanUI import Ui_scanUtilityWindow
from hostUI import Ui_hostUtilityWindow
from formatUI import Ui_formatUtilityWindow

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(731, 390)
        MainWindow.setMaximumSize(QtCore.QSize(731, 390))

        #Main Logo
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/logo.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)

        MainWindow.setStyleSheet("background-color: rgb(0, 0, 34);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        #Scan-Button
        self.scanButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.warning_button(1))
        self.scanButton.setGeometry(QtCore.QRect(90, 170, 131, 111))
        self.scanButton.setStyleSheet("QPushButton{\n"
            "    background-color: rgb(173, 240, 209);\n"
            "    border-radius: 20px\n"
            "}\n"
            "QPushButton:hover{\n"
            "    background-color: rgb(138, 237, 246);\n"
            "}\n"
            "")
        self.scanButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("icons/bug.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.scanButton.setIcon(icon1)
        self.scanButton.setIconSize(QtCore.QSize(80, 80))
        self.scanButton.setObjectName("scanButton")

        #Host-Button
        self.hostButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.warning_button(2))
        self.hostButton.setGeometry(QtCore.QRect(300, 170, 131, 111))
        self.hostButton.setStyleSheet("QPushButton{\n"
            "    background-color: rgb(173, 240, 209);\n"
            "    border-radius: 20px\n"
            "}\n"
            "QPushButton:hover{\n"
            "    background-color: rgb(138, 237, 246);\n"
            "}")
        self.hostButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/host.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.hostButton.setIcon(icon2)
        self.hostButton.setIconSize(QtCore.QSize(120, 100))
        self.hostButton.setObjectName("hostButton")

        #Erase-Button
        self.eraseButton = QtWidgets.QPushButton(self.centralwidget, clicked = lambda: self.warning_button(3))
        self.eraseButton.setGeometry(QtCore.QRect(510, 170, 131, 111))
        self.eraseButton.setStyleSheet("QPushButton{\n"
            "    background-color: rgb(173, 240, 209);\n"
            "    border-radius: 20px\n"
            "}\n"
            "QPushButton:hover{\n"
            "    background-color: rgb(138, 237, 246);\n"
            "}")
        self.eraseButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/erase.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.eraseButton.setIcon(icon3)
        self.eraseButton.setIconSize(QtCore.QSize(80, 90))
        self.eraseButton.setObjectName("eraseButton")

        #Labels for functionalites
        self.scanLabel = QtWidgets.QLabel(self.centralwidget)
        self.scanLabel.setGeometry(QtCore.QRect(90, 280, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.scanLabel.setFont(font)
        self.scanLabel.setStyleSheet("color: rgb(255, 255, 255);")
        self.scanLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.scanLabel.setObjectName("scanLabel")
        self.hostLabel = QtWidgets.QLabel(self.centralwidget)
        self.hostLabel.setGeometry(QtCore.QRect(300, 280, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.hostLabel.setFont(font)
        self.hostLabel.setStyleSheet("color: rgb(255, 255, 255);")
        self.hostLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.hostLabel.setObjectName("hostLabel")
        self.eraseLabel = QtWidgets.QLabel(self.centralwidget)
        self.eraseLabel.setGeometry(QtCore.QRect(510, 280, 131, 41))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift SemiBold")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.eraseLabel.setFont(font)
        self.eraseLabel.setStyleSheet("color: rgb(255, 255, 255);")
        self.eraseLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.eraseLabel.setObjectName("eraseLabel")
        #Main D-Redrive Label
        self.message = QtWidgets.QLabel(self.centralwidget)
        self.message.setGeometry(QtCore.QRect(0, 0, 731, 91))
        font = QtGui.QFont()
        font.setFamily("Magneto")
        font.setPointSize(24)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.message.setFont(font)
        self.message.setStyleSheet("font: 75 24pt \"Magneto\";\n"
            "color: rgb(173, 240, 209);\n"
            "background-color: rgb(0, 32, 63);")
        self.message.setAlignment(QtCore.Qt.AlignCenter)
        self.message.setObjectName("message")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    #Main-Screen Object Labelling
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "D-Redrive/Home"))
        self.scanLabel.setText(_translate("MainWindow", "Scan"))
        self.hostLabel.setText(_translate("MainWindow", "Host"))
        self.eraseLabel.setText(_translate("MainWindow", "Format"))
        self.message.setText(_translate("MainWindow", "D-Redrive"))


    #Warning box incase a drive is not inserted
    def show_warning(self):
        warn = QMessageBox()
        warn.setWindowTitle("WARNING!!")
        warn.setText("Please insert a logical drive in designated slot!")
        warn.setIcon(QMessageBox.Warning)
        warn.setStandardButtons(QMessageBox.Retry)
        warn.buttonClicked.connect(self.warning_button)
        x = warn.exec_()

    #Check condition for if drive is present at mentioned port
    def isDiskpresent(self):
        disk = True
        return disk

    def warning_button(self, i):
        if (self.isDiskpresent() == False):
            self.show_warning()
        else:
            self.openUtility(i)

    def openUtility(self, i):
        if(i == 1):
            import sys
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_scanUtilityWindow()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Scanner Opened")


        elif(i == 2):
            import sys
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_hostUtilityWindow()
            self.ui.setupUi(self.window)
            self.window.show()
            print("Drive Hosted")


        elif(i == 3):
            import sys
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_formatUtilityWindow()
            self.ui.setupUi(self.window)
            self.window.show()
            MainWindow.hide()
            print("File Format Opened")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())